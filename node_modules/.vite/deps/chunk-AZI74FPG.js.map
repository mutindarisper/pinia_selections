{
  "version": 3,
  "sources": ["../../leaflet-geoserver-request/src/L.Geoserver.js"],
  "sourcesContent": ["L.Geoserver = L.FeatureGroup.extend({\r\n  //Some of the default options\r\n  options: {\r\n    layers: \"\",\r\n    format: \"image/png\",\r\n    transparent: true,\r\n    CQL_FILTER: \"INCLUDE\",\r\n    zIndex: 1000,\r\n    version: \"1.1.0\",\r\n    srsname: \"EPSG:4326\",\r\n    attribution: `layer`,\r\n    fitLayer: true,\r\n    style: \"\",\r\n    onEachFeature: function (feature, layer) {},\r\n    wmsLayers: [],\r\n    wmsCQL_FILTER: [],\r\n    wmsStyle: [],\r\n    width: 500,\r\n    height: 500,\r\n  },\r\n\r\n  // constructor function\r\n  initialize: function (baseLayerUrl, options) {\r\n    this.baseLayerUrl = baseLayerUrl;\r\n\r\n    L.setOptions(this, options);\r\n\r\n    this._layers = {};\r\n\r\n    this.state = {\r\n      exist: \"exist\",\r\n    };\r\n  },\r\n\r\n  //wms layer function\r\n  wms: function () {\r\n    return L.tileLayer.wms(this.baseLayerUrl, this.options);\r\n  },\r\n\r\n  //wfs layer fetching function\r\n  //Note this function will work only for vector layer\r\n  wfs: function () {\r\n    var that = this;\r\n\r\n    //Geoserver Web Feature Service\r\n    $.ajax(this.baseLayerUrl, {\r\n      type: \"GET\",\r\n\r\n      data: {\r\n        service: \"WFS\",\r\n        version: \"1.1.0\",\r\n        request: \"GetFeature\",\r\n        typename: this.options.layers,\r\n        CQL_FILTER: this.options.CQL_FILTER,\r\n        srsname: this.options.srsname,\r\n        outputFormat: \"text/javascript\",\r\n        format_options: \"callback: getJson\",\r\n      },\r\n\r\n      dataType: \"jsonp\",\r\n      jsonpCallback: \"getJson\",\r\n      success: function (data) {\r\n        var layers = [];\r\n\r\n        // push all the layers to the layers array\r\n        for (var i = 0; i < data.features.length; i++) {\r\n          var layer = L.GeoJSON.geometryToLayer(\r\n            data.features[i],\r\n            that.options || null\r\n          );\r\n\r\n          layer.feature = data.features[i];\r\n          layer.options.onEachFeature = that.options.onEachFeature(\r\n            layer.feature,\r\n            layer\r\n          );\r\n\r\n          layers.push(layer);\r\n        }\r\n\r\n        // for adding styles to the geojson feature\r\n        if (typeof that.options.style === \"function\") {\r\n          for (i = 0; i < layers.length; i++) {\r\n            that.addLayer(layers[i]);\r\n            if (i.setStyle) {\r\n              i.setStyle(that.options.style(i.feature));\r\n            }\r\n          }\r\n        } else {\r\n          for (i = 0; i < layers.length; i++) {\r\n            that.addLayer(layers[i]);\r\n            that.setStyle(that.options.style);\r\n          }\r\n        }\r\n\r\n        if (that.options.fitLayer) {\r\n          that._map.fitBounds(that.getBounds());\r\n        }\r\n      },\r\n    }).fail(function (jqXHR, textStatus, error) {\r\n      console.log(jqXHR, textStatus, error);\r\n    });\r\n\r\n    return that;\r\n  },\r\n\r\n  //Legend of the map\r\n  legend: function () {\r\n    var that = this;\r\n    var legend = L.control({ position: \"bottomleft\" });\r\n    legend.onAdd = function (map) {\r\n      var div = L.DomUtil.create(\"div\", \"info Legend\");\r\n      var url = `${that.baseLayerUrl}/wms?REQUEST=GetLegendGraphic&VERSION=1.1.0&FORMAT=image/png&LAYER=${that.options.layers}&style=${that.options.style}`;\r\n      div.innerHTML +=\r\n        \"<img src=\" +\r\n        url +\r\n        ' alt=\"legend\" data-toggle=\"tooltip\" title=\"Map legend\">';\r\n      return div;\r\n    };\r\n    return legend;\r\n  },\r\n\r\n  //This function is used for zooming the raster layer using specific vector data\r\n  wmsImage: function () {\r\n    var that = this;\r\n    $.ajax({\r\n      url: `${that.baseLayerUrl}/ows?service=WFS&version=1.0.0&request=GetFeature&cql_filter=${that.options.wmsCQL_FILTER[0]}&typeName=${that.options.wmsLayers[0]}&srsName=EPSG:4326&maxFeatures=50&outputFormat=text%2Fjavascript`,\r\n      dataType: \"jsonp\",\r\n      jsonpCallback: \"parseResponse\",\r\n      success: function (data) {\r\n        // bounding box for the selected vector layer\r\n        selectedArea = L.geoJson(data);\r\n        bboxX1 = selectedArea.getBounds()._southWest.lng;\r\n        bboxX2 = selectedArea.getBounds()._northEast.lng;\r\n        bboxY1 = selectedArea.getBounds()._southWest.lat;\r\n        bboxY2 = selectedArea.getBounds()._northEast.lat;\r\n        bboxList = [bboxX1, bboxX2, bboxY1, bboxY2];\r\n        bufferBbox = Math.min((bboxX2 - bboxX1) * 0.1, (bboxY2 - bboxY1) * 0.1);\r\n        maxValue = Math.max(bboxX2 - bboxX1, bboxY2 - bboxY1) / 2.0;\r\n\r\n        var otherLayers = \"\";\r\n        var otherStyle = \"\";\r\n        var otherCqlFilter = \"\";\r\n        for (var i = 1; i < that.options.wmsLayers.length; i++) {\r\n          otherLayers += that.options.wmsLayers[i];\r\n          otherStyle += that.options.wmsStyle[i];\r\n          otherCqlFilter +=that.options.wmsCQL_FILTER[i];\r\n          if (i != that.options.wmsLayers.length - 1) {\r\n            otherLayers += \",\";\r\n            otherStyle += \",\";\r\n            otherCqlFilter += ';';\r\n          }\r\n        }\r\n\r\n        //final wmsLayerUrl\r\n        var wmsLayerURL = `${\r\n          that.baseLayerUrl\r\n        }/wms?service=WMS&version=1.1.0&request=GetMap&\\\r\nlayers=${otherLayers}&\\\r\nstyles=${otherStyle}&\\\r\ncql_filter=${otherCqlFilter}&\\\r\nbbox=${(bboxX1 + bboxX2) * 0.5 - maxValue - bufferBbox},${\r\n          (bboxY1 + bboxY2) * 0.5 - maxValue - bufferBbox\r\n        },${(bboxX1 + bboxX2) * 0.5 + maxValue + bufferBbox},${\r\n          (bboxY1 + bboxY2) * 0.5 + maxValue + bufferBbox\r\n        }&\\\r\nwidth=${that.options.width}&\\\r\nheight=${that.options.height}&\\\r\nsrs=EPSG%3A4326&\\\r\nformat=image/png`;\r\n        $(`#${that.options.wmsId}`).attr(\"src\", wmsLayerURL);\r\n        return that;\r\n      },\r\n    });\r\n    return that;\r\n  },\r\n});\r\n\r\nL.Geoserver.wms = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.wms();\r\n};\r\n\r\nL.Geoserver.wfs = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.wfs();\r\n};\r\n\r\nL.Geoserver.legend = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.legend();\r\n};\r\n\r\nL.Geoserver.wmsImage = function (baseLayerUrl, options) {\r\n  var req = new L.Geoserver(baseLayerUrl, options);\r\n  return req.wmsImage();\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
