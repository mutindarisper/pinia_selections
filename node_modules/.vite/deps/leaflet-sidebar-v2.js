import {
  __commonJS
} from "./chunk-IKJM6GHQ.js";

// node_modules/leaflet-sidebar-v2/js/leaflet-sidebar.js
var require_leaflet_sidebar = __commonJS({
  "node_modules/leaflet-sidebar-v2/js/leaflet-sidebar.js"() {
    L.Control.Sidebar = L.Control.extend({
      includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,
      options: {
        autopan: false,
        closeButton: true,
        container: null,
        position: "left"
      },
      initialize: function(options, deprecatedOptions) {
        if (typeof options === "string") {
          console.warn("this syntax is deprecated. please use L.control.sidebar({ container }) now");
          options = { container: options };
        }
        if (typeof options === "object" && options.id) {
          console.warn("this syntax is deprecated. please use L.control.sidebar({ container }) now");
          options.container = options.id;
        }
        this._tabitems = [];
        this._panes = [];
        this._closeButtons = [];
        L.setOptions(this, options);
        L.setOptions(this, deprecatedOptions);
        return this;
      },
      onAdd: function(map) {
        var i, child, tabContainers, newContainer, container;
        container = this._container;
        if (!container) {
          container = this._container || typeof this.options.container === "string" ? L.DomUtil.get(this.options.container) : this.options.container;
        }
        if (!container) {
          container = L.DomUtil.create("div", "leaflet-sidebar collapsed");
          if (typeof this.options.container === "string")
            container.id = this.options.container;
        }
        this._paneContainer = container.querySelector("div.leaflet-sidebar-content");
        if (this._paneContainer === null)
          this._paneContainer = L.DomUtil.create("div", "leaflet-sidebar-content", container);
        tabContainers = container.querySelectorAll("ul.leaflet-sidebar-tabs, div.leaflet-sidebar-tabs > ul");
        this._tabContainerTop = tabContainers[0] || null;
        this._tabContainerBottom = tabContainers[1] || null;
        if (this._tabContainerTop === null) {
          newContainer = L.DomUtil.create("div", "leaflet-sidebar-tabs", container);
          newContainer.setAttribute("role", "tablist");
          this._tabContainerTop = L.DomUtil.create("ul", "", newContainer);
        }
        if (this._tabContainerBottom === null) {
          newContainer = this._tabContainerTop.parentNode;
          this._tabContainerBottom = L.DomUtil.create("ul", "", newContainer);
        }
        for (i = 0; i < this._tabContainerTop.children.length; i++) {
          child = this._tabContainerTop.children[i];
          child._sidebar = this;
          child._id = child.querySelector("a").hash.slice(1);
          this._tabitems.push(child);
        }
        for (i = 0; i < this._tabContainerBottom.children.length; i++) {
          child = this._tabContainerBottom.children[i];
          child._sidebar = this;
          child._id = child.querySelector("a").hash.slice(1);
          this._tabitems.push(child);
        }
        for (i = 0; i < this._paneContainer.children.length; i++) {
          child = this._paneContainer.children[i];
          if (child.tagName === "DIV" && L.DomUtil.hasClass(child, "leaflet-sidebar-pane")) {
            this._panes.push(child);
            var closeButtons = child.querySelectorAll(".leaflet-sidebar-close");
            if (closeButtons.length) {
              this._closeButtons.push(closeButtons[closeButtons.length - 1]);
              this._closeClick(closeButtons[closeButtons.length - 1], "on");
            }
          }
        }
        for (i = 0; i < this._tabitems.length; i++) {
          this._tabClick(this._tabitems[i], "on");
        }
        return container;
      },
      onRemove: function(map) {
        for (var i = 0; i < this._tabitems.length; i++)
          this._tabClick(this._tabitems[i], "off");
        for (var i = 0; i < this._closeButtons.length; i++)
          this._closeClick(this._closeButtons[i], "off");
        this._tabitems = [];
        this._panes = [];
        this._closeButtons = [];
        return this;
      },
      addTo: function(map) {
        this.onRemove();
        this._map = map;
        this._container = this.onAdd(map);
        L.DomUtil.addClass(this._container, "leaflet-control");
        L.DomUtil.addClass(this._container, "leaflet-sidebar-" + this.getPosition());
        if (L.Browser.touch)
          L.DomUtil.addClass(this._container, "leaflet-touch");
        L.DomEvent.disableScrollPropagation(this._container);
        L.DomEvent.disableClickPropagation(this._container);
        L.DomEvent.on(this._container, "contextmenu", L.DomEvent.stopPropagation);
        map._container.insertBefore(this._container, map._container.firstChild);
        return this;
      },
      removeFrom: function(map) {
        console.warn("removeFrom() has been deprecated, please use remove() instead as support for this function will be ending soon.");
        this._map._container.removeChild(this._container);
        this.onRemove(map);
        return this;
      },
      open: function(id) {
        var i, child, tab;
        tab = this._getTab(id);
        if (L.DomUtil.hasClass(tab, "disabled"))
          return this;
        for (i = 0; i < this._panes.length; i++) {
          child = this._panes[i];
          if (child.id === id)
            L.DomUtil.addClass(child, "active");
          else if (L.DomUtil.hasClass(child, "active"))
            L.DomUtil.removeClass(child, "active");
        }
        for (i = 0; i < this._tabitems.length; i++) {
          child = this._tabitems[i];
          if (child.querySelector("a").hash === "#" + id)
            L.DomUtil.addClass(child, "active");
          else if (L.DomUtil.hasClass(child, "active"))
            L.DomUtil.removeClass(child, "active");
        }
        this.fire("content", { id });
        if (L.DomUtil.hasClass(this._container, "collapsed")) {
          this.fire("opening");
          L.DomUtil.removeClass(this._container, "collapsed");
          if (this.options.autopan)
            this._panMap("open");
        }
        return this;
      },
      close: function() {
        var i;
        for (i = 0; i < this._tabitems.length; i++) {
          var child = this._tabitems[i];
          if (L.DomUtil.hasClass(child, "active"))
            L.DomUtil.removeClass(child, "active");
        }
        if (!L.DomUtil.hasClass(this._container, "collapsed")) {
          this.fire("closing");
          L.DomUtil.addClass(this._container, "collapsed");
          if (this.options.autopan)
            this._panMap("close");
        }
        return this;
      },
      addPanel: function(data) {
        var pane, tab, tabHref, closeButtons, content;
        tab = L.DomUtil.create("li", data.disabled ? "disabled" : "");
        tabHref = L.DomUtil.create("a", "", tab);
        tabHref.href = "#" + data.id;
        tabHref.setAttribute("role", "tab");
        tabHref.innerHTML = data.tab;
        tab._sidebar = this;
        tab._id = data.id;
        tab._button = data.button;
        if (data.title && data.title[0] !== "<")
          tab.title = data.title;
        if (data.position === "bottom")
          this._tabContainerBottom.appendChild(tab);
        else
          this._tabContainerTop.appendChild(tab);
        this._tabitems.push(tab);
        if (data.pane) {
          if (typeof data.pane === "string") {
            pane = L.DomUtil.create("DIV", "leaflet-sidebar-pane", this._paneContainer);
            content = "";
            if (data.title)
              content += '<h1 class="leaflet-sidebar-header">' + data.title;
            if (this.options.closeButton)
              content += '<span class="leaflet-sidebar-close"><i class="fa fa-caret-' + this.options.position + '"></i></span>';
            if (data.title)
              content += "</h1>";
            pane.innerHTML = content + data.pane;
          } else {
            pane = data.pane;
            this._paneContainer.appendChild(pane);
          }
          pane.id = data.id;
          this._panes.push(pane);
          closeButtons = pane.querySelectorAll(".leaflet-sidebar-close");
          if (closeButtons.length) {
            this._closeButtons.push(closeButtons[closeButtons.length - 1]);
            this._closeClick(closeButtons[closeButtons.length - 1], "on");
          }
        }
        this._tabClick(tab, "on");
        return this;
      },
      removePanel: function(id) {
        var i, j, tab, pane, closeButtons;
        for (i = 0; i < this._tabitems.length; i++) {
          if (this._tabitems[i]._id === id) {
            tab = this._tabitems[i];
            this._tabClick(tab, "off");
            tab.remove();
            this._tabitems.splice(i, 1);
            break;
          }
        }
        for (i = 0; i < this._panes.length; i++) {
          if (this._panes[i].id === id) {
            pane = this._panes[i];
            closeButtons = pane.querySelectorAll(".leaflet-sidebar-close");
            for (j = 0; j < closeButtons.length; j++) {
              this._closeClick(closeButtons[j], "off");
            }
            pane.remove();
            this._panes.splice(i, 1);
            break;
          }
        }
        return this;
      },
      enablePanel: function(id) {
        var tab = this._getTab(id);
        L.DomUtil.removeClass(tab, "disabled");
        return this;
      },
      disablePanel: function(id) {
        var tab = this._getTab(id);
        L.DomUtil.addClass(tab, "disabled");
        return this;
      },
      onTabClick: function(e) {
        if (L.DomUtil.hasClass(this, "active")) {
          this._sidebar.close();
        } else if (!L.DomUtil.hasClass(this, "disabled")) {
          if (typeof this._button === "string")
            window.location.href = this._button;
          else if (typeof this._button === "function")
            this._button(e);
          else
            this._sidebar.open(this.querySelector("a").hash.slice(1));
        }
      },
      _tabClick: function(tab, on) {
        var link = tab.querySelector("a");
        if (!link.hasAttribute("href") || link.getAttribute("href")[0] !== "#")
          return;
        if (on === "on") {
          L.DomEvent.on(tab.querySelector("a"), "click", L.DomEvent.preventDefault, tab).on(tab.querySelector("a"), "click", this.onTabClick, tab);
        } else {
          L.DomEvent.off(tab.querySelector("a"), "click", this.onTabClick, tab);
        }
      },
      onCloseClick: function() {
        this.close();
      },
      _closeClick: function(closeButton, on) {
        if (on === "on") {
          L.DomEvent.on(closeButton, "click", this.onCloseClick, this);
        } else {
          L.DomEvent.off(closeButton, "click", this.onCloseClick);
        }
      },
      _getTab: function(id) {
        for (var i = 0; i < this._tabitems.length; i++) {
          if (this._tabitems[i]._id === id)
            return this._tabitems[i];
        }
        throw Error('tab "' + id + '" not found');
      },
      _panMap: function(openClose) {
        var panWidth = Number.parseInt(L.DomUtil.getStyle(this._container, "max-width")) / 2;
        if (openClose === "open" && this.options.position === "left" || openClose === "close" && this.options.position === "right")
          panWidth *= -1;
        this._map.panBy([panWidth, 0], { duration: 0.5 });
      }
    });
    L.control.sidebar = function(options, deprecated) {
      return new L.Control.Sidebar(options, deprecated);
    };
  }
});

// dep:leaflet-sidebar-v2
var leaflet_sidebar_v2_default = require_leaflet_sidebar();
export {
  leaflet_sidebar_v2_default as default
};
//# sourceMappingURL=leaflet-sidebar-v2.js.map
