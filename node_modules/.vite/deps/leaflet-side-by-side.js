import {
  require_leaflet_src
} from "./chunk-H56PZOIR.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS
} from "./chunk-IKJM6GHQ.js";

// vite:dep-pre-bundle:external-conversion:D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/layout.css
var layout_exports = {};
__export(layout_exports, {
  default: () => default2
});
import { default as default2 } from "D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/layout.css";
import * as layout_star from "D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/layout.css";
var init_layout = __esm({
  "vite:dep-pre-bundle:external-conversion:D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/layout.css"() {
    __reExport(layout_exports, layout_star);
  }
});

// vite:dep-pre-bundle:external-conversion:D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/range.css
var range_exports = {};
__export(range_exports, {
  default: () => default3
});
import { default as default3 } from "D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/range.css";
import * as range_star from "D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/range.css";
var init_range = __esm({
  "vite:dep-pre-bundle:external-conversion:D:/myPractice/learn_vue3/node_modules/leaflet-side-by-side/range.css"() {
    __reExport(range_exports, range_star);
  }
});

// node_modules/leaflet-side-by-side/index.js
var require_leaflet_side_by_side = __commonJS({
  "node_modules/leaflet-side-by-side/index.js"(exports, module) {
    var L = require_leaflet_src();
    init_layout();
    init_range();
    var mapWasDragEnabled;
    var mapWasTapEnabled;
    function getRangeEvent(rangeInput) {
      return "oninput" in rangeInput ? "input" : "change";
    }
    function cancelMapDrag() {
      mapWasDragEnabled = this._map.dragging.enabled();
      mapWasTapEnabled = this._map.tap && this._map.tap.enabled();
      this._map.dragging.disable();
      this._map.tap && this._map.tap.disable();
    }
    function uncancelMapDrag(e) {
      this._refocusOnMap(e);
      if (mapWasDragEnabled) {
        this._map.dragging.enable();
      }
      if (mapWasTapEnabled) {
        this._map.tap.enable();
      }
    }
    function asArray(arg) {
      return arg === "undefined" ? [] : Array.isArray(arg) ? arg : [arg];
    }
    function noop() {
    }
    L.Control.SideBySide = L.Control.extend({
      options: {
        thumbSize: 42,
        padding: 0
      },
      initialize: function(leftLayers, rightLayers, options) {
        this.setLeftLayers(leftLayers);
        this.setRightLayers(rightLayers);
        L.setOptions(this, options);
      },
      getPosition: function() {
        var rangeValue = this._range.value;
        var offset = (0.5 - rangeValue) * (2 * this.options.padding + this.options.thumbSize);
        return this._map.getSize().x * rangeValue + offset;
      },
      setPosition: noop,
      includes: L.Evented.prototype || L.Mixin.Events,
      addTo: function(map) {
        this.remove();
        this._map = map;
        var container = this._container = L.DomUtil.create("div", "leaflet-sbs", map._controlContainer);
        this._divider = L.DomUtil.create("div", "leaflet-sbs-divider", container);
        var range = this._range = L.DomUtil.create("input", "leaflet-sbs-range", container);
        range.type = "range";
        range.min = 0;
        range.max = 1;
        range.step = "any";
        range.value = 0.5;
        range.style.paddingLeft = range.style.paddingRight = this.options.padding + "px";
        this._addEvents();
        this._updateLayers();
        return this;
      },
      remove: function() {
        if (!this._map) {
          return this;
        }
        if (this._leftLayer) {
          this._leftLayer.getContainer().style.clip = "";
        }
        if (this._rightLayer) {
          this._rightLayer.getContainer().style.clip = "";
        }
        this._removeEvents();
        L.DomUtil.remove(this._container);
        this._map = null;
        return this;
      },
      setLeftLayers: function(leftLayers) {
        this._leftLayers = asArray(leftLayers);
        this._updateLayers();
        return this;
      },
      setRightLayers: function(rightLayers) {
        this._rightLayers = asArray(rightLayers);
        this._updateLayers();
        return this;
      },
      _updateClip: function() {
        var map = this._map;
        var nw = map.containerPointToLayerPoint([0, 0]);
        var se = map.containerPointToLayerPoint(map.getSize());
        var clipX = nw.x + this.getPosition();
        var dividerX = this.getPosition();
        this._divider.style.left = dividerX + "px";
        this.fire("dividermove", { x: dividerX });
        var clipLeft = "rect(" + [nw.y, clipX, se.y, nw.x].join("px,") + "px)";
        var clipRight = "rect(" + [nw.y, se.x, se.y, clipX].join("px,") + "px)";
        if (this._leftLayer) {
          this._leftLayer.getContainer().style.clip = clipLeft;
        }
        if (this._rightLayer) {
          this._rightLayer.getContainer().style.clip = clipRight;
        }
      },
      _updateLayers: function() {
        if (!this._map) {
          return this;
        }
        var prevLeft = this._leftLayer;
        var prevRight = this._rightLayer;
        this._leftLayer = this._rightLayer = null;
        this._leftLayers.forEach(function(layer) {
          if (this._map.hasLayer(layer)) {
            this._leftLayer = layer;
          }
        }, this);
        this._rightLayers.forEach(function(layer) {
          if (this._map.hasLayer(layer)) {
            this._rightLayer = layer;
          }
        }, this);
        if (prevLeft !== this._leftLayer) {
          prevLeft && this.fire("leftlayerremove", { layer: prevLeft });
          this._leftLayer && this.fire("leftlayeradd", { layer: this._leftLayer });
        }
        if (prevRight !== this._rightLayer) {
          prevRight && this.fire("rightlayerremove", { layer: prevRight });
          this._rightLayer && this.fire("rightlayeradd", { layer: this._rightLayer });
        }
        this._updateClip();
      },
      _addEvents: function() {
        var range = this._range;
        var map = this._map;
        if (!map || !range)
          return;
        map.on("move", this._updateClip, this);
        map.on("layeradd layerremove", this._updateLayers, this);
        L.DomEvent.on(range, getRangeEvent(range), this._updateClip, this);
        L.DomEvent.on(range, "touchstart", cancelMapDrag, this);
        L.DomEvent.on(range, "touchend", uncancelMapDrag, this);
        L.DomEvent.on(range, "mousedown", cancelMapDrag, this);
        L.DomEvent.on(range, "mouseup", uncancelMapDrag, this);
      },
      _removeEvents: function() {
        var range = this._range;
        var map = this._map;
        if (range) {
          L.DomEvent.off(range, getRangeEvent(range), this._updateClip, this);
          L.DomEvent.off(range, "touchstart", cancelMapDrag, this);
          L.DomEvent.off(range, "touchend", uncancelMapDrag, this);
          L.DomEvent.off(range, "mousedown", cancelMapDrag, this);
          L.DomEvent.off(range, "mouseup", uncancelMapDrag, this);
        }
        if (map) {
          map.off("layeradd layerremove", this._updateLayers, this);
          map.off("move", this._updateClip, this);
        }
      }
    });
    L.control.sideBySide = function(leftLayers, rightLayers, options) {
      return new L.Control.SideBySide(leftLayers, rightLayers, options);
    };
    module.exports = L.Control.SideBySide;
  }
});

// dep:leaflet-side-by-side
var leaflet_side_by_side_default = require_leaflet_side_by_side();
export {
  leaflet_side_by_side_default as default
};
//# sourceMappingURL=leaflet-side-by-side.js.map
